#-------------------------------------------------------------
# Source global definitions (if any)
#-------------------------------------------------------------

if [ -f /etc/bashrc ]; then
      . /etc/bashrc   # --> Read /etc/bashrc, if present.
fi

#-------------------
# Terminal Prompt
#-------------------

# PS1="\W ☠️  "
# PS1="\u \W: "

## Custom Prompt
function bash_git_branch
{
  # first option branch name, second option is detached head
  _br=$(git symbolic-ref -q --short HEAD 2> /dev/null || git  rev-parse --short HEAD 2> /dev/null)
  if [ ! -z $_br ]; then printf "[%s]" $_br; fi
}
# [branch]:folder$
PS1='\[\e[0;32m\]$(bash_git_branch)\[\e[m\]:\[\e[0;36m\]\W\[\e[m\]\$ '


#-------------------
# Personnal Aliases
#-------------------

alias ll='ls -larthG'
alias lm='ll |more'
alias lk='ll -lSr'

alias h='history'
alias path='echo -e ${PATH//:/\\n}'
alias which='type -a'


## Navigation
function up { path=""; if [ $1 ]; then for i in $(seq 1 $1); do path=$path"../"; done; else path="../"; fi; cd $path; } # usage: $up 2
alias projects='cd ~/Projects && ll'
alias ios='clear && cd ~/Projects/~iOS && ll'
alias iosg='clear && cd ~/Projects/~iOS/iOSGateway && ll'


bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

## file opening aliases
alias proj='open *.xc[ow][do][er][pk]*' # .xcodeproj or .xcworkspace
alias edit='bbedit'
alias readme='less *[Rr][Ee][Aa][Dd]*[Mm][Ee]*'


## git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias branch='git branch'
alias co='git checkout'
alias unpushed='git log @{upstream}..'
alias unpulled='git fetch; git log ..@{upstream}'
alias filelog='git log --stat --oneline'
alias stash='git stash'


## tab completion for git repos folders under workspace
function _projects()
{
    local curw
    COMPREPLY=()
    curw=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=($(compgen -W '$(ls /Users/jonflowers/Projects)' -- $curw))
    return 0
}
function c()
{
    cd /Users/jonflowers/Projects/$1/
}
complete -F _projects -o dirnames c


## tab completion for git branches
function _branches()
{
    local curw
    local branches
    COMPREPLY=()
    curw=${COMP_WORDS[COMP_CWORD]}
    branches=$(git for-each-ref --format='%(refname:short)' refs/heads/)
    COMPREPLY=($(compgen -W '$branches' -- $curw))
    return 0
}
complete -F _branches co
